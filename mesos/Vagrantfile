# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

$MIN_MESOS_MASTER_DEPLOYMENT=1
$MED_MESOS_MASTER_DEPLOYMENT=3
$MAX_MESOS_MASTER_DEPLOYMENT=5

$MIN_MESOS_SLAVE_DEPLOYMENT=1
$MED_MESOS_SLAVE_DEPLOYMENT=3
$MAX_MESOS_SLAVE_DEPLOYMENT=5

$MESOS_MASTER_IP="10.0.0.1"
$MESOS_SLAVE_IP="10.0.0.2"

$ZOOKEEPER_PORT=2181
$ZOOKEEPER_LEADER=2888
$ZOOKEEPER_ELECTION=3888

$ZOOKEEPER_URL="zk://"
$ZOOKEEPER_ZOO_CFG="\n"

$MARATHON_ZOOKEEPER_URL=""

Vagrant.configure(2) do |config|
	# control deployment size
	$MESOS_MASTER_DEPLOYMENT=$MIN_MESOS_MASTER_DEPLOYMENT
	$MESOS_SLAVE_DEPLOYMENT=$MED_MESOS_SLAVE_DEPLOYMENT

	# calculate quorum for mesos master	
	$MESOS_MASTER_QUORUM = ($MESOS_MASTER_DEPLOYMENT/2.to_f).ceil

	# generate zookeeper url and cfg
	#for i in 1..3
	for i in 1..$MESOS_MASTER_DEPLOYMENT
		$ZOOKEEPER_URL.concat("#{$MESOS_MASTER_IP}#{i}:#{$ZOOKEEPER_PORT}")
		$ZOOKEEPER_ZOO_CFG.concat("server.#{i}=#{$MESOS_MASTER_IP}#{i}:#{$ZOOKEEPER_LEADER}:#{$ZOOKEEPER_ELECTION}")
		
		if i < $MESOS_MASTER_DEPLOYMENT then
		#if i < 3 then
			$ZOOKEEPER_URL.concat(",")
			$ZOOKEEPER_ZOO_CFG.concat("\n")
		end	
	end
	$MARATHON_ZOOKEEPER_URL=$ZOOKEEPER_URL.dup
	$MARATHON_ZOOKEEPER_URL.concat("/marathon")
	$ZOOKEEPER_URL.concat("/mesos") 
	
	#
	# MESOS MASTER
	#
	(1..$MESOS_MASTER_DEPLOYMENT).each do |i|


  		config.vm.define "mesosmaster#{i}" do |master|
			$MESOS_MASTER_IP="10.0.0.1#{i}"

    			master.vm.box = 'trusty64'
    			master.vm.network 'private_network', ip: "#{$MESOS_MASTER_IP}"
    			master.vm.hostname = "mesosmaster#{i}"

    			master.vm.provider 'virtualbox' do |vb|
      				vb.name = "mesosmaster#{i}"
      				vb.memory = 512 
      				vb.cpus = 1
    			end

			master.vm.provision "shell" do |s|
				s.inline =  <<-SHELL
          				# $1: ZOOKEEPER_URL
					# $2: ZOOKEEPER_ID
					# $3: $ZOOKEEPER_ZOO_CFG
					# $4: $MESOS_MASTER_QUORUM
					# $5: $MESOS_MASTER_IP
					# $6: $MARATHON_ZOOKEEPER_URL
	
					sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF
					DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
					CODENAME=$(lsb_release -cs)
					echo "deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main" | sudo tee /etc/apt/sources.list.d/mesosphere.list
					sudo add-apt-repository ppa:openjdk-r/ppa

					sudo apt-get -y update
				
					sudo apt-get -y install openjdk-8-jdk
					sudo apt-get -y install mesos marathon chronos

					sudo apt-get clean
					sudo apt-get autoremove
					sudo rm -rf /var/lib/apt/lists/*

					## configure zookeeper
					#echo "CONFIGURING ZOOKEEPER:"
					#echo "setting zookeeper url"
					echo $1 | tee /etc/mesos/zk
					#echo "setting zookeeper id"
					echo $2 | tee /etc/zookeeper/conf/myid
					#echo "setting zookeeper configuration"
					sudo rsync /vagrant/files/zoo.cfg /etc/zookeeper/conf/zoo.cfg
					echo $3 | tee -a /etc/zookeeper/conf/zoo.cfg 

					## configure mesos master 
					#echo "CONFIGURING MESOS MASTER:"
					#echo "setting mesos master quorum"
					echo $4 | tee /etc/mesos-master/quorum 
					#echo "setting mesos master ip"
					echo $5 | tee /etc/mesos-master/ip 
					echo $5 | tee /etc/mesos-master/hostname
					## stop mesos-slave service 				
					sudo service mesos-slave stop
					echo manual | sudo tee /etc/init/mesos-slave.override

					## configure marathon	
					#echo "CONFIGURING MARATHON:"
					sudo mkdir -p /etc/marathon/conf
					## settingi marathon hostname
					echo $5 | tee  /etc/marathon/conf/hostname
					## setting zookeeper configuration for marathon
					sudo cp /etc/mesos/zk /etc/marathon/conf/master
					echo $6 | tee /etc/marathon/conf/zk 
					#echo 'docker,mesos' | tee /etc/mesos-slave/containerizers
					#echo '10mins' | tee /etc/mesos-slave/executor_registration_timeout

					## restart services
					sudo service zookeeper restart
					sudo service mesos-master restart
					sudo service marathon restart

        			SHELL
				s.args = [$ZOOKEEPER_URL,"#{i}",$ZOOKEEPER_ZOO_CFG,$MESOS_MASTER_QUORUM,$MESOS_MASTER_IP,$MARATHON_ZOOKEEPER_URL]
			end
  		end
	end
	
	#
	# MESOS SLAVES
	#
	(1..$MESOS_SLAVE_DEPLOYMENT).each do |i|
  		config.vm.define "mesosslave#{i}" do |slave|
			$MESOS_SLAVE_IP="10.0.0.2#{i}"

    			slave.vm.box = 'trusty64'
    			slave.vm.network 'private_network', ip: "#{$MESOS_SLAVE_IP}"
    			slave.vm.hostname = "mesosslave#{i}"

    			slave.vm.provider 'virtualbox' do |vb|
      				vb.name = "mesosslave#{i}"
      				vb.memory = 1024 
      				vb.cpus = 2
    			end
			slave.vm.provision "shell" do |s|
				s.inline =  <<-SHELL
          				# $1: ZOOKEEPER_URL
					# $2: $MESOS_SLAVE_IP
					
					# add mesosphere sources		
					sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E56151BF
					DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
					CODENAME=$(lsb_release -cs)
					echo "deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main" | sudo tee /etc/apt/sources.list.d/mesosphere.list
					# add jdk repository	
					sudo add-apt-repository ppa:openjdk-r/ppa

					# add docker sources
					sudo apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
					echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" | sudo tee /etc/apt/sources.list.d/docker.list

					sudo apt-get -y update
					
					sudo apt-get -y install docker-engine
					sudo apt-get -y install openjdk-8-jdk
					sudo apt-get -y install mesos

					sudo apt-get clean
					sudo apt-get autoremove
					sudo rm -rf /var/lib/apt/lists/*

					sudo service mesos-slave stop

					## configure zookeeper
					#echo "CONFIGURING ZOOKEEPER:"
					#echo "setting zookeeper url"
					echo $1 | tee /etc/mesos/zk
					
					sudo service zookeeper stop
					echo manual | sudo tee /etc/init/zookeeper.override
					sudo service mesos-master stop
					echo manual | sudo tee /etc/init/mesos-master.override
		
					echo $2 | sudo tee /etc/mesos-slave/ip
					sudo cp /etc/mesos-slave/ip /etc/mesos-slave/hostname

					echo 'docker,mesos' | tee /etc/mesos-slave/containerizers
					echo '10mins' | tee /etc/mesos-slave/executor_registration_timeout

					sudo service mesos-slave start

					# pull a docker image to test
					docker pull tutum/hello-world
			
				SHELL
				s.args = [$ZOOKEEPER_URL,$MESOS_SLAVE_IP]
			end
		end
	
	end
end
